# Word-Rider-
#Valentino's project for second term holiday.

from PyQt5.QtCore import (QFile, QFileInfo, QPoint, QRect, QSettings, QSize, Qt, QTextStream)
from PyQt5.QtGui import QIcon, QKeySequence
from PyQt5.QtWidgets import (QAction, QApplication, QFileDialog, QMainWindow, QMessageBox, QTextEdit)


class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()

        self.curFile = ''

        self.textEdit = QTextEdit()
        self.setCentralWidget(self.textEdit)

        self.createActions()
        self.createMenus()
        self.createToolBars()
        self.createStatusBar()

        self.readSettings()

        self.textEdit.document().contentsChanged.connect(self.documentWasModified)

        self.setCurrentFile('')

    def closeEvent(self, event):
        if self.maybeSave():
            self.writeSettings()
            event.accept()
        else:
            event.ignore()

    def newFile(self):
        if self.maybeSave():
            self.textEdit.clear()
            self.setCurrentFile('')

    def open(self):
        if self.maybeSave():
            fileName, _ = QFileDialog.getOpenFileName(self)
            if fileName:
                self.loadFile(fileName)

    def save(self):
        if self.curFile:
            return self.saveFile(self.curFile)

        return self.saveAs()

    def saveAs(self):
        fileName, _ = QFileDialog.getSaveFileName(self)
        if fileName:
            return self.saveFile(fileName)

        return False

    def about(self):
        QMessageBox.about(self, "üéôÔ∏èHELP FROM VALENTINO..", "The Application is WORD RIDER giving you a word view developed by Valentino. \n\nTHANK YOU FOR USING IT .\t So you need help.   \n\n\t\t\t\t\t\t\t\t\t\t\t\tüí®HElP \n\n1. If you need to now how you typ your work just click once then use the keyboard.\n\n2. lf you need to to how to do the rest of things just follow the instructions I think they are more clear.. \n\n3. If you want  to exit the app press the exit but button In more options or use exit shortcut Ctrl+Q ")
   

    
    def documentWasModified(self):
        self.setWindowModified(self.textEdit.document().isModified())

    def createActions(self):
        root = QFileInfo(__file__).absolutePath()



        self.newAct = QAction(QIcon(root + '/images/new.png'), "&New", self, shortcut="Ctrl +n" , statusTip=" WORD RIDER..Create a new file", triggered=self.newFile)

        self.openAct = QAction(QIcon(root + '/images/open.png'), "&Open...", self, shortcut=" Ctrl +o", statusTip=" WORD RIDER..Open an existing file", triggered=self.open)

        self.saveAct = QAction(QIcon(root + '/images/save.png'), "&Save", self, shortcut=" Ctrl+s", statusTip=" Valentino advises you to Save the document to disk", triggered=self.save)

        self.saveAsAct = QAction("Save &As...", self, shortcut=" Ctrl +i", statusTip=" WORD RIDER..Save the document under a new name", triggered=self.saveAs)

        self.exitAct = QAction("E&xit", self, shortcut="Ctrl+q", statusTip=" WORD RIDER..Exit the application", triggered=self.close)

        self.cutAct = QAction(QIcon(root + '/images/cut.png'), "Cu&t", self, shortcut="Ctrl +x ", statusTip=" WORD RIDER..Cut the current selection's contents to the clipboard", triggered=self.textEdit.cut)

        self.copyAct = QAction(QIcon(root + '/images/copy.png'), "&Copy", self, shortcut=" Ctrl +c", statusTip=" WORD RIDER..Copy the current selection's contents to the clipboard", triggered=self.textEdit.copy)

        self.pasteAct = QAction(QIcon(root + '/images/paste.png'), "Paste", self, shortcut=" Ctrl +v", statusTip=" WORD RIDER..Paste the clipboard's contents into the current selection", triggered=self.textEdit.paste)

        self.aboutAct =        QMessageBox.about(self, "  VALEN012 ", "Welcome to the WORD RIDER software were you find more than what you expect.. version 2.00 ")
    
        
        self.aboutAct = QAction("üñ•Ô∏èMore about WORD RIDER." , self,shortcut=" Ctrl + b", statusTip="", 
triggered=self.about) 

        self.cutAct.setEnabled(False)
        self.copyAct.setEnabled(False)
        self.textEdit.copyAvailable.connect(self.cutAct.setEnabled)
        self.textEdit.copyAvailable.connect(self.copyAct.setEnabled)

    def createMenus(self):
        self.fileMenu = self.menuBar().addMenu("üóÉÔ∏èMore Options" )
        self.fileMenu.addAction(self.newAct)
        self.fileMenu.addAction(self.openAct)
        self.fileMenu.addAction(self.saveAct)
        self.fileMenu.addAction(self.saveAsAct)
        self.fileMenu.addSeparator()
        self.fileMenu.addAction(self.exitAct)

        self.editMenu = self.menuBar().addMenu("üìùEdit..")
        self.editMenu.addAction(self.cutAct)
        self.editMenu.addAction(self.copyAct)
        self.editMenu.addAction(self.pasteAct)

        self.menuBar().addSeparator()

  
        self.helpMenu = self.menuBar().addMenu("üßæHelp from valentino")
        self.helpMenu.addAction(self.aboutAct)
        self.helpMenu.addAction(self.aboutAct)   
        self.helpMenu.addAction(self.aboutAct) 
        
    
    
    def createToolBars(self):
        self.fileToolBar = self.addToolBar("File")
        self.fileToolBar.addAction(self.newAct)
        self.fileToolBar.addAction(self.openAct)
        self.fileToolBar.addAction(self.saveAct)

        self.editToolBar = self.addToolBar("Edit")
        self.editToolBar.addAction(self.cutAct)
        self.editToolBar.addAction(self.copyAct)
        self.editToolBar.addAction(self.pasteAct)

    def createStatusBar(self):
        self.statusBar().showMessage(" üì†VALN012 introduces the WORD RIDER....Ready")

    def readSettings(self):
        settings = QSettings("Trolltech", "Application Example")
        pos = settings.value("pos", QPoint(200, 200))
        size = settings.value("size", QSize(400, 400))
        self.resize(size)
        self.move(pos)

    def writeSettings(self):
        settings = QSettings("Trolltech", "Application Example")
        settings.setValue("pos", self.pos())
        settings.setValue("size", self.size())

    def maybeSave(self):
        if self.textEdit.document().isModified():
            ret = QMessageBox.warning(self, "VALEN012", " Thanks you for using the WORD RIDER ,üìÑThe document has been modified.\nDo you want to save " "your changes?", QMessageBox.Save | QMessageBox.Discard | QMessageBox.Cancel)

            if ret == QMessageBox.Save:
                return self.save()

            if ret == QMessageBox.Cancel:
                return False

        return True

    def loadFile(self, fileName):
        file = QFile(fileName)
        if not file.open(QFile.ReadOnly | QFile.Text):
            QMessageBox.warning(self, " üó≥Ô∏èVALEN012WORD", "Cannot read file %s:\n%s." % (fileName, file.errorString()))
            return

        inf = QTextStream(file)
        QApplication.setOverrideCursor(Qt.WaitCursor)
        self.textEdit.setPlainText(inf.readAll())
        QApplication.restoreOverrideCursor()

        self.setCurrentFile(fileName)
        self.statusBar().showMessage(" üì§WORD RIDER...File loaded", 2000)

    def saveFile(self, fileName):
        file = QFile(fileName)
        if not file.open(QFile.WriteOnly | QFile.Text):
            QMessageBox.warning(self, "WORD RIDER", "Cannot write file %s:\n%s." % (fileName, file.errorString()))
            return False

        outf = QTextStream(file)
        QApplication.setOverrideCursor(Qt.WaitCursor)
        outf << self.textEdit.toPlainText()
        QApplication.restoreOverrideCursor()
        self.setCurrentFile(fileName)
        self.statusBar().showMessage(" üì•Valentino proves your file so it saved", 2000)
        return True

    def setCurrentFile(self, fileName):
        self.curFile = fileName
        self.textEdit.document().setModified(False)
        self.setWindowModified(False)

        if self.curFile:
            shownName = self.strippedName(self.curFile)
        else:
            shownName = 'untitled.txt'

        self.setWindowTitle("%s[*] - Application" % shownName)

    def strippedName(self, fullFileName):
        return QFileInfo(fullFileName).fileName()

if __name__ == '__main__':

    import sys

    app = QApplication(sys.argv)
    mainWin = MainWindow()
    mainWin.show()
    sys.exit(app.exec_())
#I end this project by thanking my Teacher.. Mr. Peter for introducing me to this knowledge.... .o
